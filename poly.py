"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Cesar Moreno and Saif Ansari, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: sia548
UT EID 2: cm62873
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    """"
    xsd
    """
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 3/24. If you choose to use
        # a dummy node, comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        """
        Insert_term function
        """
        if coeff == 0:
            pass
        elif self.head is None:
            self.head = Node(coeff, exp)
        elif exp > self.head.exp:
            self.head = Node(coeff, exp, link = self.head)
        elif exp < self.head.exp:
            curr = self.head
            while curr:
                if curr.next is None:
                    curr.next = Node(coeff,exp)
                    break
                if curr.next.exp > exp:
                    curr=curr.next
                elif curr.next.exp <exp:
                    curr.next= Node(coeff,exp, curr.next)
                    break
                elif curr.next.exp == exp:
                    curr.next.coeff += coeff
                    break
        #equal exponent
        else:
            self.head.coeff +=coeff
            if self.head.coeff == 0:
                self.head = self.head.next

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        """
        add function
        """
        new_poly = LinkedList()
        curr1 = self.head
        curr2 = p.head
        while curr1 or curr2:
            if curr1 is None:
                new_poly.insert_term(curr2.coeff, curr2.exp)
                curr2 = curr2.next
            elif curr2 is None:
                new_poly.insert_term(curr1.coeff, curr1.exp)
                curr1 = curr1.next
            elif curr1.exp > curr2.exp:
                new_poly.insert_term(curr1.coeff, curr1.exp)
                curr1 = curr1.next
            elif curr1.exp < curr2.exp:
                new_poly.insert_term(curr2.coeff, curr2.exp)
                curr2 = curr2.next
            else:
                total = curr1.coeff + curr2.coeff
                if total != 0:
                    new_poly.insert_term(total, curr1.exp)
                curr1 = curr1.next
                curr2 = curr2.next
        return new_poly

    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        """
        Mult function
        """
        curr_p1 = self.head
        curr_p2 = p.head


        new_p= LinkedList()

        while curr_p1:
            while curr_p2:
                new_p.insert_term(curr_p1.coeff * curr_p2.coeff, curr_p1.exp + curr_p2.exp)
                curr_p2 = curr_p2.next
            curr_p1=curr_p1.next
            curr_p2 = p.head

        return new_p

    # Return a string representation of the polynomial.
    def __str__(self):
        #this is temporary
        nodes_str = []
        current = self.head
        while current is not None:
            nodes_str.append(str(current))
            current = current.next
        # nodes_str.append("None")
        return " + ".join(nodes_str)



def main():
    """
    Main function
    """
    # read data from stdin (terminal/file) using input() and create polynomial p
    first_call = int(input())
    p1 = LinkedList()
    for _ in range(first_call):
        coeff, exp = input().split()
        p1.insert_term(int(coeff), int(exp))
    blank = input()
    second_call= int(input())
    p2 = LinkedList()
    for _ in range(second_call):
        coeff, exp = input().split()
        p2.insert_term(int(coeff), int(exp))
    # read data from stdin (terminal/file) using input() and create polynomial q

    print(p1.add(p2))

    # get sum of p and q as a new linked list and print sum

    print(p1.mult(p2))
    # get product of p and q as a new linked list and print product


if __name__ == "__main__":
    main()
